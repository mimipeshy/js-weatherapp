(()=>{"use strict";const e=async function(e){const t=await Promise.race([fetch(void 0),(10,new Promise(((e,t)=>{setTimeout((()=>{t(new Error("Request took too long! Timeout after 10 second"))}),1e4)})))]);const a=await t.json();if(!t.ok)throw new Error(`${a.message[0].toUpperCase()+a.message.slice(1)} (${t.status})`);return a}(),t={data:{}},a=(e,t="short")=>{const a="full"===t?{dateStyle:"full",timeStyle:"short"}:{timeStyle:"short"},s=new Date(1e3*e);return new Intl.DateTimeFormat(navigator.language,a).format(s)};async function s(s){const n=Array.isArray(s)?`lat=${s[0]}&lon=${s[1]}`:`q=${s}`,r=await e(`https://api.openweathermap.org/data/2.5/weather?${n}&units=metric&appid=da55a677205c556d6c26145698c431fd`);t.data={name:r.name,country:r.sys.country,temp:Math.round(r.main.temp),feelsLike:Math.round(r.main.feels_like),humidity:r.main.humidity,sunrise:a(r.sys.sunrise),sunset:a(r.sys.sunset),date:a(r.dt,"full"),iconSmall:`https://openweathermap.org/img/wn/${r.weather[0].icon}@2x.png`,description:r.weather[0].description[0].toUpperCase()+r.weather[0].description.slice(1),unit:"metric"};const i=await e(`https://restcountries.eu/rest/v2/alpha?codes=${t.data.country}`);t.data.flag=i[0].flag}const n=new class{constructor(){this.parentElement=document.querySelector(".glass__result"),this.searchBar=document.querySelector(".glass__search-bar"),this.smallCircle=document.querySelector(".circle--small"),this.message="What's the weather like today? ☁"}getQuery(){const e=this.searchBar.querySelector(".glass__search-input").value;return this.clearInput(),e}clearInput(){this.searchBar.querySelector(".glass__search-input").value=""}clear(){this.parentElement.innerHTML=""}render(e){if(!e)return;const t=`\n    <div class="glass__weather">\n      <span>Updated as of:</span>\n      <p><span>${e.date}</span></p><br>\n      <h2>${e.name}, ${e.country}</h2>\n      <div class="glass__temperature">\n          <img src="${e.iconSmall}" alt="weather icon" class="glass__weather-icon">\n          <h1>${e.temp}<sup>°${"metric"===e.unit?"C":"F"}</sup></h1>\n      </div>\n      <p>${e.description}</p>\n      <div class="glass__details">\n          <p>Feels like: ${e.feelsLike} °${"metric"===e.unit?"C":"F"}</p>\n          <p>Humidity: ${e.humidity}%</p>\n          <p>Sunrise: ${e.sunrise}</p>\n          <p>Sunset: ${e.sunset}</p>\n      </div>\n      <div class="glass__switch">\n          <div class="glass__select celcius ${"metric"===e.unit?"glass__select--active":""}" data-unit="metric">C</div>\n          <div class="glass__select fahrenheit ${"imperial"===e.unit?"glass__select--active":""}" data-unit="imperial">F</div>\n      </div>\n    </div>\n    `;this.smallCircle.style.backgroundImage=`url(${e.iconBig})`,this.clear(),this.parentElement.insertAdjacentHTML("afterbegin",t)}renderSpinner(){this.clear(),this.parentElement.insertAdjacentHTML("afterbegin",'<div class="glass__loader"></div>')}renderMessage(e=this.message){const t=`<span class="glass__text">${e}</span>`;this.clear(),this.parentElement.insertAdjacentHTML("afterbegin",t)}addHandlerSearch(e){this.searchBar.addEventListener("submit",(t=>{t.preventDefault(),e()}))}addHandlerConvert(e){this.parentElement.addEventListener("click",(t=>{const a=t.target.closest(".glass__select");a&&!a.classList.contains("glass__select--active")&&e(a.dataset.unit)}))}};async function r(e){try{const{latitude:a}=e.coords,{longitude:r}=e.coords;await s([a,r]),n.render(t.data)}catch(e){n.renderMessage(e.message)}}var i;(i=()=>{n.renderSpinner(),navigator.geolocation&&navigator.geolocation.getCurrentPosition(r,(()=>{n.renderMessage()}))},window.addEventListener("load",i),n.addHandlerSearch((async function(){try{n.renderSpinner();const e=n.getQuery();if(!e)return;await s(e),n.render(t.data)}catch(e){n.renderMessage(e.message)}})),void n.addHandlerConvert((e=>{(e=>{"imperial"===e&&(t.data.temp=Math.round(9*t.data.temp/5+32),t.data.feelsLike=Math.round(9*t.data.feelsLike/5+32),t.data.unit="imperial"),"metric"===e&&(t.data.temp=Math.round(5*(t.data.temp-32)/9),t.data.feelsLike=Math.round(5*(t.data.feelsLike-32)/9),t.data.unit="metric")})(e),n.render(t.data)})))()})();